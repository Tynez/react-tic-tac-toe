{"version":3,"sources":["styles/board.module.css","styles/scoreboard.module.css","styles/game-over.module.css","engine.ts","utils/bind.ts","components/app-board.tsx","components/app-scoreboard.tsx","components/app-game-over.tsx","components/app-tictactoe.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Engine","gameStatus","winningCondition","scoreBoard","this","firstPlayer","secondPlayer","draw","position","isValidPosition","length","isFreeSpace","isGameOver","getNextPlayerMark","updateScore","isFirstPlayerTheWinner","isSecondPlayerTheWinner","isDraw","getFreeSpaces","filter","element","playerMark","row","every","checkVictory","bind","styles","classNames","cx","Board","actualBoard","onSlotClick","className","board","map","idx","onClick","token","Scoreboard","actualScore","scoreboard","GameOver","message","onNewGame","TicTacToe","useState","engine","setBoard","clickedSlot","play","updateBoard","console","log","reset","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7451774.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"board_board__SwQNT\",\"board-animation\":\"board_board-animation__auM4M\",\"board--first-player-token\":\"board_board--first-player-token__KWb1D\",\"token\":\"board_token__3br4a\",\"board--second-player-token\":\"board_board--second-player-token__bHzb3\",\"first-player-token-animation\":\"board_first-player-token-animation__lIkDV\",\"second-player-token-rotation-right\":\"board_second-player-token-rotation-right__2Bz-F\",\"second-player-token-rotation-left\":\"board_second-player-token-rotation-left__2tJAK\",\"game-over\":\"board_game-over__GZ5ru\",\"board--winner-token\":\"board_board--winner-token__1Q6YJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreboard\":\"scoreboard_scoreboard__8_ZeD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game-over-message\":\"game-over_game-over-message__HNcKQ\",\"game-over-message--content\":\"game-over_game-over-message--content__iDt8l\",\"game-over-show\":\"game-over_game-over-show__16DkM\"};","import type { PlayerToken, ScoreBoard } from './utils/tictactoe'\n\nexport class Engine {\n  private gameStatus: PlayerToken[]\n  private winningCondition: number[][] = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n\n  scoreBoard: ScoreBoard\n\n  constructor() {\n    this.gameStatus = [null, null, null, null, null, null, null, null, null]\n    this.scoreBoard = {\n      firstPlayer: 0,\n      secondPlayer: 0,\n      draw: 0,\n    }\n  }\n\n  board(): PlayerToken[] {\n    return this.gameStatus\n  }\n\n  play(position: number): void {\n    const isValidPosition = position < this.gameStatus.length\n    const isFreeSpace = this.gameStatus[position] === null\n    if (!this.isGameOver && isValidPosition && isFreeSpace) {\n      this.gameStatus[position] = this.getNextPlayerMark()\n    }\n    this.updateScore()\n  }\n\n  updateScore(): void {\n    if (this.isFirstPlayerTheWinner) {\n      this.scoreBoard.firstPlayer++\n    }\n    if (this.isSecondPlayerTheWinner) {\n      this.scoreBoard.secondPlayer++\n    }\n    if (this.isDraw) {\n      this.scoreBoard.draw++\n    }\n  }\n\n  reset(): void {\n    this.gameStatus = [null, null, null, null, null, null, null, null, null]\n  }\n\n  get isFirstPlayerTheWinner(): boolean {\n    return this.checkVictory('o').length > 0\n  }\n\n  get isSecondPlayerTheWinner(): boolean {\n    return this.checkVictory('x').length > 0\n  }\n\n  get isDraw(): boolean {\n    return (\n      !this.isFirstPlayerTheWinner && !this.isFirstPlayerTheWinner && this.getFreeSpaces() === 0\n    )\n  }\n\n  get isGameOver(): boolean {\n    return this.isFirstPlayerTheWinner || this.isSecondPlayerTheWinner || this.isDraw\n  }\n\n  get getWinnerLine(): number[] {\n    if (this.isFirstPlayerTheWinner) {\n      return this.checkVictory('o')[0]\n    }\n    if (this.isSecondPlayerTheWinner) {\n      return this.checkVictory('x')[0]\n    }\n    return []\n  }\n\n  private getNextPlayerMark(): PlayerToken {\n    return this.getFreeSpaces() % 2 === 0 ? 'x' : 'o'\n  }\n\n  private getFreeSpaces(): number {\n    return this.gameStatus.filter(element => element === null).length\n  }\n\n  private checkVictory(playerMark: PlayerToken): number[][] {\n    const winnerCombinations = this.winningCondition.filter(row =>\n      row.every(element => this.gameStatus[element] === playerMark),\n    )\n    return winnerCombinations\n  }\n}\n","import classNames from 'classnames/bind'\n\nexport const bind = (styles: Record<string, string>) => classNames.bind(styles)\n","import { FC } from 'react'\nimport { PlayerToken } from '../utils/tictactoe'\nimport { bind } from '../utils/bind'\nimport styles from '../styles/board.module.css'\n\ninterface Props {\n  actualBoard: PlayerToken[]\n  onSlotClick(slot: number): void\n}\n\nconst cx = bind(styles)\n\nexport const Board: FC<Props> = ({ actualBoard, onSlotClick }) => {\n  return (\n    <ul className={styles.board}>\n      {actualBoard.map((element, idx) => (\n        <li\n          key={idx}\n          className={cx({\n            ['board--first-player-token']: element === 'o',\n            ['board--second-player-token']: element === 'x',\n          })}\n          onClick={() => onSlotClick(idx)}\n        >\n          <div className={styles.token}></div>\n        </li>\n      ))}\n    </ul>\n  )\n}\n","import { FC } from 'react'\nimport { ScoreBoard } from '../utils/tictactoe'\nimport styles from '../styles/scoreboard.module.css'\n\ninterface Props {\n  actualScore: ScoreBoard\n}\n\nexport const Scoreboard: FC<Props> = ({ actualScore }) => {\n  return (\n    <section className={styles.scoreboard}>\n      <h3>Player 1: {actualScore.firstPlayer}</h3>\n      <h3>Player 2: {actualScore.secondPlayer}</h3>\n      <h3>Draws: {actualScore.draw}</h3>\n    </section>\n  )\n}\n","import { FC } from 'react'\nimport styles from '../styles/game-over.module.css'\nimport { bind } from '../utils/bind'\n\ninterface Props {\n  isGameOver: boolean\n  message: string\n  onNewGame(): void\n}\n\nconst cx = bind(styles)\n\nexport const GameOver: FC<Props> = ({ isGameOver, message, onNewGame }) => {\n  if (isGameOver) {\n    return (\n      <div className={cx({ ['game-over-message']: true })}>\n        <div className={cx({ ['game-over-message--content']: true })}>\n          <h1>Game Over</h1>\n          <h2>{message}</h2>\n          <section>\n            <button onClick={() => onNewGame()}>Play again</button>\n          </section>\n        </div>\n      </div>\n    )\n  }\n\n  return <></>\n}\n","import { FC, useState } from 'react'\nimport { Engine } from '../engine'\nimport { Board } from './app-board'\nimport { Scoreboard } from './app-scoreboard'\nimport { GameOver } from './app-game-over'\n\nexport const TicTacToe: FC = () => {\n  const [engine] = useState(new Engine())\n  const [board, setBoard] = useState(engine.board())\n\n  const updateBoard = (clickedSlot: number) => {\n    engine.play(clickedSlot)\n    setBoard([...engine.board()])\n  }\n\n  function winnerMessage(): string {\n    if (engine.isFirstPlayerTheWinner) {\n      return 'First player wins!'\n    }\n    if (engine.isSecondPlayerTheWinner) {\n      return 'Second player wins!'\n    }\n    return 'It is a draw!'\n  }\n\n  const newGame = () => {\n    console.log('click')\n    engine.reset()\n    setBoard(engine.board())\n  }\n\n  return (\n    <section>\n      <h1>Tic Tac Toe</h1>\n      <Scoreboard actualScore={{ ...engine.scoreBoard }} />\n      <Board actualBoard={[...board]} onSlotClick={clickedSlot => updateBoard(clickedSlot)} />\n      <GameOver\n        isGameOver={engine.isGameOver}\n        message={winnerMessage()}\n        onNewGame={() => newGame()}\n      />\n    </section>\n  )\n}\n","import './styles/theme.css'\nimport './app.css'\nimport { TicTacToe } from './components/app-tictactoe'\n\nfunction App() {\n  return (\n    <main className=\"App\">\n      <TicTacToe />\n    </main>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './app'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}